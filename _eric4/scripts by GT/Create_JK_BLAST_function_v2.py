from Bio import SeqIO
import time
import csv
import os
import random

FastaFileDb='Combined_TrimmedPi_and_Pc_20131212.fasta'
BLAST='SelfBLASTp_Combined_TrimmedPi_and_Pc_20131212.txt'
leave_out_percentage = 0.2
num_sets = 100


def GenerateJkBLAST(Fasta, leave_out_percentage, num_sets, BLAST, evalue, col_evalue=11, PrintOutDbID=True, LISTidDB_Folder='ListProtID_DB'):
    """Fasta is database used for a Self-BLASTp
    Leave_out_percentage is a value between 0 and 1 that represent the % of seq to leave out; eg, 0.2 to leave 20% of the sequence out
    num_sets is a intergrer that correspond to the number of sets to generate
    BLAST is a BLAST output to use as a basis for the JackKnifing. 
    evalue is an evalue cutoff; eg, 0.1 ; 1e-5 etc...
    col_evalue is the number of the column in which the evalue is stored. for a standard tabular BLAST output, it is column 11
    PrintOutDbID is set on True by default, in that case it prints a file that list the name of protein present in the generated db
   the db list and the BLAST can be match thanks to a unique identifier generated by time.time() + a random selection of 5 number called serie
    LISTidDB_Folder is the name of the folder in which the List of protein in the database is printed, only matters if LISTidDB_Folder is set to True"""
    from Bio import SeqIO
    import time
    import csv
    import os
    import random
    
    Serie='%05d'%random.randrange(0,99999)
    
    SizeDic={}
    
    seqlist = [] #list of protein id
    
    t0 = time.time()
    
    ##-- Use Bio.SeqIO to read each of the input files into a single list of sequences--#
    for rec in SeqIO.parse(FastaFileDb,'fasta'): ##
        seqlist.append(rec.id)
        SizeDic[rec.id]=len(rec) #key is id of sequence, value is length of sequence to calculate the size of DB
    print "Read %d sequences names into memory in %.2fs" % (len(seqlist), time.time() - t0) 
    
    ##-- Calculate the size of the database--#
    OldDbSize=0
    for element in SizeDic:
        OldDbSize=OldDbSize+SizeDic.get(element)
    seq_count = int((1-leave_out_percentage) * len(seqlist))
    
    ##--Create a Dictionnary that contain "num_sets" entries
    ##each key is a number, each value is a list of protein id--#
    JackKnifeDic={}
    for i in range(num_sets):
        random.shuffle(seqlist)
        JackKnifeDic[time.time()]=seqlist[:seq_count]
            
    print "Generated set of %d jackknife in %.2fs" %\
    (len(JackKnifeDic), time.time()-t0)
    
    ##-- open the blast file using csv module as BLASTReader --#
    BLASTcsv=open(BLAST)
    BLASTdialect=csv.Sniffer().sniff(BLASTcsv.read(1024))
    BLASTReader=csv.reader(BLASTcsv, BLASTdialect) 
    BLASTcsv.seek(0)
    print 'BLAST output open'

    ##-- Create an output folder for the newly generated BLAST outputs --#
    BLASTOutFolder=os.path.join(os.getcwd(), 'JK_generated_BLASTOutput')
    if not os.path.isdir(BLASTOutFolder):
        os.makedirs(BLASTOutFolder)
    ##-- Create JK BLAST output--#
    for Key in JackKnifeDic:
        t0=time.time()
        ## get size new db #
        NewDbSize=0
        for element in JackKnifeDic.get(Key):
            NewDbSize=NewDbSize+SizeDic.get(element)
        ##open outputfile
        OutFile=open(os.path.join(BLASTOutFolder,'JK_BLAST_evalue%s_%s_%s_%s'%(evalue, Key, Serie, BLAST)), 'w')
        ListID=JackKnifeDic.get(Key)
        BLASTcsv.seek(0)
        for line in BLASTReader:
            if line[0] in ListID and line[1] in ListID:
                newline=line
                newline[col_evalue-1]='%.0e'%((float(line[col_evalue-1])*NewDbSize)/OldDbSize) # the .0e write the value in exponential without any decimal, just as the standard blast output but is a string
                if float(newline[col_evalue-1])<=evalue:
                    Outwriter=csv.writer(OutFile,  BLASTdialect)
                    Outwriter.writerow(newline)
        if PrintOutDbID ==True:
            if not os.path.isdir(LISTidDB_Folder):
                os.makedirs(LISTidDB_Folder)
            LISTidDB=open(os.path.join(LISTidDB_Folder, 'ListProteinIdDb_%s_%s_%s.txt'%(Key, Serie, BLAST)), 'w')
            print>>LISTidDB,  '\n'.join(ListID)
        print 'file generated in %.2fs sec' %(time.time()-t0)
        OutFile.close()


#GenerateJkBLAST(FastaFileDb, 0.2, 100, BLAST, 1e-30, LISTidDB_Folder='ListProtID_DB')
