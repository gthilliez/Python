# This scripts aims to compare the clustering output of MCL to the file 
#generated generated by the M2H of Hpa and P. infestans effectors against 
#arabidopsis proteins

#def GetPITGNumberClusters(MCLdump):
#    """Comments
#    This part of the script aims to extract the PITG number of cluster members
#    from P. infestans
#    MCLdump is a path to the MCL dump file that will be used in this analysis"""
#    Fh=open(MCLdump)
#    PITGContainingClusters=[] #or is it better to use a dic?
#    for line in MCLdump:
#        if 'PITG' in line: #if the line//cluster does not contain any P. infestans protein, it is ignored
#            FormatedLine=line.strip().replace('PITG_', '').split('\t') #how to remove the _1 or T0 at the end of the PITG number? should it be replaced now or later?
#            PITGContainingCluster.append(FormatedLine)
#        else:
#            continue
#    else:
#        return PITGContainingClusters



FilePath=''# to define; should lead to a dump file generated by MCL
PinfClust=GetPITGNumberClusters(FilePath)


def CreateLoLaDic(LoLaFile): ##Function works
    """Comments
    This part of the script should read a tab delimited table
    and extract the id of the interacting bait and prey to
    create a dictionnary"""
    BaitIndex= 3 #Bait = Effector
    PreyIndex= 0 #Prey = AT interacting protein picked up in the screen
    Fh=open(LoLaFile)
    Dic={}
    for line in Fh:
        Bait=line.strip().split('\t')[BaitIndex]
        Prey=line.strip().split('\t')[PreyIndex]
        if Bait not in Dic:
            Dic[Bait]=[Prey]
        elif Prey not in Dic.get(Bait):
            Dic.get(Bait).append(Prey)
    else:
        return Dic


LoLaPath='D:\\Lola tables\\InteractionWorkfile20012013_tab.txt'
LoLaDic=CreateLoLaDic(LoLaPath)



def MatchMCLandLoLa(MCLpath, LoLaDictionary):
    """Comments
    """
    fh=open(MCLpath)
    for index, line in enumerate(fh):
        ClusterList=line.strip().split('\t') #might need to be carefull with PITG_####_1 and PITG_####T0
        for ClusterMember in ClusterList: # in the following section, each cluster member will be compare to the lola table
            if ClusterMember in LoLaDictionary: #if we have interaction data we will store them in a dictionary of dictionary
                if str(index) in MCLLoLaDic: #MCLLoLaDic will have key that correspond to the Cluster index, each value is a dictionary where the only key is the clustermember and the associated value is a list of the interactor as recorded in the LoLaDictionary
                    MCLLoLaDic.get(str(index))[ClusterMember]=LoLaDictionary.get(ClusterMember)
                else:
                    MCLLoLaDic[str(index)]={ClusterMember:LoLaDictionary.get(ClusterMember)}
        else:
            if str(index) in MCLLoLaDic: #if we have info on at least one cluster member
                if len(MCLLoLaDic.get(str(index)))>1: #if we have info on more than one clustermember
                    #find a way to compare all the sets
                    ##note : set.intersection(*ListSets) compare all the set contained in ListSets. so it could be use in this situtation
